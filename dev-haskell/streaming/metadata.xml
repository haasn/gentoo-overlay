<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<maintainer type="project">
		<email>haskell@gentoo.org</email>
		<name>Gentoo Haskell</name>
	</maintainer>
	<longdescription>
		@Streaming.Prelude@ exports an elementary streaming prelude focused on
		a simple \&quot;source\&quot; or \&quot;producer\&quot; type, namely @Stream (Of a) m r@.
		@Stream (Of a) m r@ is a sort of effectful version of
		@([a],r)@ in which successive elements arise from some sort of monadic
		action. Everything in the library is organized to make
		programming with this type as simple as possible,
		by the simple expedient of making it as close to @Prelude@
		and @Data.List@ as possible. Thus for example
		the trivial program
		
		&gt; S.sum (S.take 3 (S.readLn :: Stream (Of Integer) IO ()))
		
		sums the first three valid integers from user input. Similarly,
		
		&gt; S.stdoutLn (S.map reverse (S.take 3 S.stdinLn))
		
		reverses the first three lines from stdin as they arise,
		and sends them to stdout. And so on,
		with filtering, mapping, breaking, chunking and so forth.
		We program with streams of @Int@s or @String@s directly as
		if they constituted something like a list. And we everywhere
		oppose \&quot;extracting a list from IO\&quot;,
		which is the origin of typical Haskell memory catastrophes.
		Basically any case where you are
		tempted to use @mapM@, @replicateM@, @traverse@ or @sequence@
		with Haskell lists, you would do better to use something like
		@Stream (Of a) m r@. The type signatures are a little fancier, but
		the programs themselves are mostly the same or simpler. Thus,
		consider the trivial demo program mentioned in
		&lt;http://stackoverflow.com/questions/24068399/haskell-performance-of-iorefs this SO question&gt;
		
		&gt; main = mapM newIORef [1..10^8::Int] &gt;&gt;= mapM readIORef &gt;&gt;= mapM_ print
		
		It quickly exhausts memory, of course, and this has nothing to do with
		the efficiency of @IORefs@. It is immediately cured by writing
		
		&gt; import qualified Streaming.Prelude as S
		&gt; main = S.print (S.mapM readIORef (S.mapM newIORef (S.each [1..10^8::Int])))
		
		which really does what the other program was meant to do,
		uses no more memory than @hello-world@, and is simpler anyway, since it
		doesn&#39;t involve \&quot;extracting a list from IO\&quot;. Almost
		every use of list @mapM@, @replicateM@, @traverse@ and @sequence@ produces
		this problem on a smaller scale. People get used to it, as if it were
		characteristic of Haskell programs to use a lot of memory, when
		\&quot;extracting a list or sequence from IO\&quot; is just bad practice pure and simple.
		Of course, @mapM@, @replicateM@, @traverse@ and @sequence@ make sense for lists,
		under certain conditions. Similarly, @unsafePerformIO@ makes sense under
		certain conditions.
		
		The @Streaming@ module exports the general type,
		@Stream f m r@, which can be used to stream successive distinct
		steps characterized by /any/
		functor @f@, though we are mostly interested in organizing computations
		of the form @Stream (Of a) m r@. The streaming-IO libraries have
		various devices for dealing
		with effectful variants of @[a]@ or @([a],r)@ in which the emergence of
		successive elements somehow depends on IO. But it is only with
		the general type @Stream f m r@, or some equivalent,
		that one can envisage (for example) the connected streaming of their
		sorts of stream - as one makes lists of lists in the Haskell
		@Prelude@ and @Data.List@. One needs some such type if we are
		to express properly streaming equivalents of e.g.
		
		&gt; group :: Ord a =&gt; [a] -&gt; [[a]]
		&gt; chunksOf :: Int -&gt; [a] -&gt; [[a]]
		&gt; lines :: [Char] -&gt; [[Char]] -- but similarly with bytestring, etc.
		
		to mention a few obviously desirable operations.
		(This is explained more elaborately in the &lt;https://hackage.haskell.org/package/streaming#readme readme&gt; below.)
		One could throw something
		like @Stream@ on top of a prior stream concept: this is how @pipes@ and
		@pipes-group@ (which are very much our model here) use @FreeT@.
		But once one grasps the iterable stream concept needed to express
		those functions -
		the one here given a somewhat optimized implementation as @Stream f m r@
		(the specific optimization again follows the model of the @pipes@ library) -
		then one will also see that,
		with it, one is /already/ in possession of a complete
		elementary streaming library - since one possesses @Stream ((,) a) m r@
		or equivalently @Stream (Of a) m r@. This
		is the type of a \&#39;generator\&#39; or \&#39;producer\&#39; or whatever
		you call an effectful stream of items.
		/The present Streaming.Prelude is thus the simplest streaming library that can replicate anything like the API of the Prelude and Data.List/.
		
		The emphasis of the library is on interoperation; for
		the rest its advantages are: extreme simplicity, re-use of
		intuitions the user has gathered from mastery of @Prelude@ and
		@Data.List@, and a total and systematic rejection of type synonyms.
		The two conceptual pre-requisites are some
		comprehension of monad transformers and some familiarity
		with \&#39;rank 2 types\&#39;. It is hoped that experimentation with this
		simple material, starting with the ghci examples in @Streaming.Prelude@,
		will give people who are new to these concepts some
		intuition about their importance. The most fundamental purpose of the
		library is to express elementary streaming ideas without reliance on
		a complex framework, but in a way that integrates transparently with
		the rest of Haskell, using ideas - e.g. rank 2 types, which are here
		implicit or explicit in most mapping - that the user can carry elsewhere,
		rather than binding her intelligence to a so-called streaming IO framework (as
		necessary as that is for certain purposes.)
		
		See the
		&lt;https://hackage.haskell.org/package/streaming#readme readme&gt;
		below for further explanation, including the examples linked there.
		Elementary usage can be divined from the ghci examples in
		@Streaming.Prelude@ and perhaps from this rough beginning of a
		&lt;https://github.com/michaelt/streaming-tutorial/blob/master/tutorial.md tutorial&gt;.
		Note also the
		&lt;https://hackage.haskell.org/package/streaming-bytestring streaming bytestring&gt;
		and
		&lt;https://hackage.haskell.org/package/streaming-utils streaming utils&gt;
		packages. Questions about usage can be put
		raised on StackOverflow with the tag @[haskell-streaming]@,
		or as an issue on Github, or on the
		&lt;https://groups.google.com/forum/#!forum/haskell-pipes pipes list&gt;
		(the package understands itself as part of the pipes \&#39;ecosystem\&#39;.)
		
		The simplest form of interoperation with
		&lt;http://hackage.haskell.org/package/pipes pipes&gt;
		is accomplished with this isomorphism:
		
		&gt; Pipes.unfoldr Streaming.next        :: Stream (Of a) m r   -&gt; Producer a m r
		&gt; Streaming.unfoldr Pipes.next        :: Producer a m r      -&gt; Stream (Of a) m r
		
		Interoperation with
		&lt;http://hackage.haskell.org/package/io-streams io-streams&gt;
		is thus:
		
		&gt; Streaming.reread IOStreams.read     :: InputStream a       -&gt; Stream (Of a) IO ()
		&gt; IOStreams.unfoldM Streaming.uncons  :: Stream (Of a) IO () -&gt; IO (InputStream a)
		
		With
		&lt;http://hackage.haskell.org/package/conduit conduit&gt;
		one might use, e.g.:
		
		&gt; Conduit.unfoldM Streaming.uncons                        :: Stream (Of a) m () -&gt; Source m a
		&gt; \str -&gt; Streaming.mapM_ Conduit.yield (hoist lift str)  :: Stream (Of o) m r  -&gt; ConduitM i o m r
		&gt; \src -&gt; hoist lift str $$ Conduit.mapM_ Streaming.yield :: Source m a         -&gt; Stream (Of a) m ()
		
		These conversions should never be more expensive than a single @&gt;-&gt;@ or @=$=@.
		The simplest interoperation with regular Haskell lists is provided by, say
		
		&gt; Streaming.each                                 :: [a]               -&gt; Stream (Of a) m ()
		&gt; Streaming.toList_                              :: Stream (Of a) m r -&gt; m [a]
		
		The latter of course accumulates the whole list in memory, and is mostly what we are trying
		to avoid. Every use of @Prelude.mapM f@ should be reconceived as using the
		composition @Streaming.toList_ . Streaming.mapM f . Streaming.each@ with a view to
		considering whether the accumulation required by @Streaming.toList_@ is really necessary.
		
		Here are the results of some
		&lt;https://gist.github.com/michaelt/96606bbf05b29bf43a05aba081dc9bd4#file-benchmachines-hs microbenchmarks&gt;
		based on the
		&lt;https://github.com/ekmett/machines/blob/master/benchmarks/Benchmarks.hs benchmarks&gt;
		included in the machines package:
		
		&lt;&lt;http://i.imgur.com/YbQtlXm.png&gt;&gt;
		
		Because these are microbenchmarks for individual functions,
		they represent a sort of \&quot;worst case\&quot;; many other factors can influence
		the speed of a complex program.
		
	</longdescription>
</pkgmetadata>
